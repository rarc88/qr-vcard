{"version":3,"sources":["components/form-vcard/styles.js","components/my-button/index.js","components/form-vcard/index.js","components/qr/styles.js","components/qr/index.js","pages/vcard/styles.js","pages/vcard/index.js","App.js","serviceWorker.js","Context.js","index.js"],"names":["MyInputBase","styled","InputBase","CustomButton","Button","background","border","borderRadius","color","fontWeight","padding","MyButton","title","type","useStyles","makeStyles","theme","separator","paddingTop","FormVcard","handleSubmit","classes","noValidate","autoComplete","onSubmit","Grid","item","xs","Typography","variant","component","container","className","md","justify","spacing","defaultValue","name","placeholder","MyQRCode","QRCode","QR","value","id","renderAs","level","includeMargin","MyAnchor","a","root","marginTop","paper","textAlign","palette","text","secondary","center","Vcard","useState","vcard","setVcard","lg","Paper","e","preventDefault","data","FormData","target","vCard","vCardJS","firstName","get","lastName","cellPhone","homePhone","homeFax","email","organization","homeAddress","street","city","postalCode","stateProvince","countryRegion","url","getFormattedString","href","onClick","qr","document","getElementById","saveSvgAsPng","scale","App","Boolean","window","location","hostname","match","Context","createContext","children","Provider","Consumer","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83fb45d8.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nexport const MyInputBase = styled(InputBase)`\r\n  border: 2px solid rgba(0,0,0,.1);\r\n  border-radius: 3px;\r\n  width: 100%;\r\n  padding: 7px 10px;\r\n`\r\n","import React from 'react';\r\nimport { styled } from '@material-ui/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst CustomButton = styled(Button)({\r\n  background: '#90c52d',\r\n  border: 0,\r\n  borderRadius: 30,\r\n  color: 'white',\r\n  fontWeight: 'bold',\r\n  padding: '15px 80px',\r\n});\r\n\r\nexport const MyButton = ({ title }) => {\r\n\r\n  return (\r\n\r\n    <CustomButton type=\"submit\">{title}</CustomButton>\r\n\r\n  );\r\n\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { MyInputBase } from './styles';\r\nimport { MyButton } from '../my-button';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  separator: {\r\n    paddingTop: '20px',\r\n  },\r\n}));\r\n\r\nexport const FormVcard = ({ handleSubmit }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n\r\n    <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n\r\n      {/* Titulo */}\r\n\r\n      <Grid item xs={12}>\r\n\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          Código QR vCard\r\n        </Typography>\r\n\r\n      </Grid>\r\n\r\n      {/* Nombre */}\r\n\r\n      <Grid item container className={classes.separator}>\r\n\r\n        <Grid item xs={12} md={2}>Tu Nombre:</Grid>\r\n\r\n        <Grid item container xs={12} md={10} justify=\"space-between\" spacing={2}>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n\r\n            <MyInputBase defaultValue=\"\" name=\"firstName\" placeholder=\"Nombre\" />\r\n\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <MyInputBase defaultValue=\"\" name=\"lastName\" placeholder=\"Apellido\" />\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      {/* Números */}\r\n\r\n      <Grid item container className={classes.separator}>\r\n\r\n        <Grid item xs={12} md={2}>Números:</Grid>\r\n\r\n        <Grid item container xs={12} md={10} justify=\"space-between\" spacing={2}>\r\n          \r\n          <Grid item xs={12}>\r\n\r\n            <MyInputBase defaultValue=\"\" name=\"cellPhone\" placeholder=\"Teléfono móvil\" />\r\n\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <MyInputBase defaultValue=\"\" name=\"homePhone\" placeholder=\"Teléfono fijo\" />\r\n\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <MyInputBase defaultValue=\"\" name=\"homeFax\" placeholder=\"Fax\" />\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      {/* Email */}\r\n\r\n      <Grid item container className={classes.separator} xs={12} spacing={2}>\r\n\r\n        <Grid item xs={12} md={2}>Email:</Grid>\r\n\r\n        <Grid item xs={12} md={10}>\r\n\r\n          <MyInputBase defaultValue=\"\" name=\"email\" placeholder=\"tu@email.com\" />\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      {/* Empresa */}\r\n\r\n      <Grid item container className={classes.separator}>\r\n\r\n        <Grid item xs={12} md={2}>Empresa:</Grid>\r\n\r\n        <Grid item container xs={12} md={10} justify=\"space-between\" spacing={2}>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n\r\n            <MyInputBase defaultValue=\"\" name=\"organization\" placeholder=\"Empresa\" />\r\n\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <MyInputBase defaultValue=\"\" name=\"job\" placeholder=\"Puesto\" />\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      {/* Dirección */}\r\n\r\n      <Grid item container className={classes.separator} xs={12} spacing={2}>\r\n\r\n        <Grid item xs={12} md={2}>Dirección:</Grid>\r\n\r\n        <Grid item xs={12} md={10}>\r\n\r\n          <MyInputBase defaultValue=\"\" name=\"address\" placeholder=\"\" />\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      {/* Ciudad */}\r\n\r\n      <Grid item container className={classes.separator}>\r\n\r\n        <Grid item xs={12} md={2}>Tu Ciudad:</Grid>\r\n\r\n        <Grid item container xs={12} md={10} justify=\"space-between\" spacing={2}>\r\n          \r\n          <Grid item xs={12} md={8}>\r\n\r\n            <MyInputBase defaultValue=\"\" name=\"city\" placeholder=\"\" />\r\n\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={4}>\r\n\r\n            <MyInputBase defaultValue=\"\"  name=\"postalCode\" placeholder=\"C.P.\" />\r\n\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      {/* Estado */}\r\n\r\n      <Grid item container className={classes.separator} xs={12} spacing={2}>\r\n\r\n        <Grid item xs={12} md={2}>Estado:</Grid>\r\n\r\n        <Grid item xs={12} md={10}>\r\n\r\n          <MyInputBase defaultValue=\"\" name=\"state\" placeholder=\"\" />\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      {/* País */}\r\n\r\n      <Grid item container className={classes.separator} xs={12} spacing={2}>\r\n\r\n        <Grid item xs={12} md={2}>País:</Grid>\r\n\r\n        <Grid item xs={12} md={10}>\r\n\r\n          <MyInputBase defaultValue=\"\" name=\"country\" placeholder=\"\" />\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      {/* Sitio web */}\r\n\r\n      <Grid item container className={classes.separator} xs={12} spacing={2}>\r\n\r\n        <Grid item xs={12} md={2}>Sitio web:</Grid>\r\n\r\n        <Grid item xs={12} md={10}>\r\n\r\n          <MyInputBase defaultValue=\"\" name=\"website\" placeholder=\"www.tu-sitio-web.com\" />\r\n\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n      {/* Boton */}\r\n\r\n      <Grid item xs={12} className={classes.separator}>\r\n\r\n        <MyButton title=\"CREAR CÓDIGO QR\" />\r\n\r\n      </Grid>\r\n\r\n    </form>\r\n\r\n  );\r\n  \r\n}\r\n","import styled from 'styled-components';\r\nimport QRCode from 'qrcode.react';\r\n\r\nexport const MyQRCode = styled(QRCode)`\r\n    width:100%;\r\n    height:100%;\r\n    max-width: 250px;\r\n    max-height: 250px;\r\n`","import React from 'react';\r\n// import QRCode from 'qrcode.react';\r\nimport { MyQRCode } from \"./styles\";\r\n\r\nexport const QR = ({ value = '' }) => {\r\n\r\n  return (\r\n\r\n    <MyQRCode\r\n      id=\"qr\"\r\n      value={value}\r\n      // size={250}\r\n      renderAs={\"svg\"}\r\n      level={\"H\"}\r\n      includeMargin={false}\r\n    />\r\n\r\n  );\r\n\r\n}","import styled from 'styled-components'\r\n\r\nexport const MyAnchor = styled.a`\r\n  display: block;\r\n  text-align: center;\r\n  color: blue;\r\n  text-decoration: none;\r\n`\r\n","import React, { useState } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport vCardJS from 'vcards-js';\r\nimport { saveSvgAsPng } from 'save-svg-as-png';\r\n\r\nimport { FormVcard } from '../../components/form-vcard';\r\nimport { QR }  from '../../components/qr';\r\n\r\nimport { MyAnchor } from './styles'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      marginTop: '20px',\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(6),\r\n      textAlign: 'left',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n    center: {\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n\r\nexport const Vcard = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [vcard, setVcard] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n    \r\n        const data = new FormData(e.target);\r\n\r\n        const vCard = vCardJS();\r\n\r\n        vCard.firstName = data.get('firstName');\r\n        vCard.lastName = data.get('lastName');\r\n        vCard.cellPhone = data.get('cellPhone');\r\n        vCard.homePhone = data.get('homePhone');\r\n        vCard.homeFax = data.get('homeFax');\r\n        vCard.email = data.get('email');\r\n        vCard.organization = data.get('organization');\r\n        vCard.title = data.get('job');\r\n        vCard.homeAddress.street = data.get('address');\r\n        vCard.homeAddress.city = data.get('city');\r\n        vCard.homeAddress.postalCode = data.get('postalCode');\r\n        vCard.homeAddress.stateProvince = data.get('state');\r\n        vCard.homeAddress.countryRegion = data.get('country');\r\n        vCard.url = data.get('website');\r\n\r\n        setVcard(vCard.getFormattedString());\r\n    \r\n    }\r\n\r\n    const downloadQR = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        const qr = document.getElementById('qr');\r\n        \r\n        saveSvgAsPng(qr, 'qr-vcard.png', {scale: 5});\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <Grid container justify=\"center\" className={classes.root} spacing={2}>\r\n\r\n            <Grid item xs={12} md={8} lg={6}>\r\n\r\n                <Paper className={classes.paper}>\r\n\r\n                    <FormVcard handleSubmit={handleSubmit} />\r\n\r\n                </Paper>\r\n\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={3} lg={2}>\r\n\r\n                <Paper className={classes.paper}>\r\n\r\n                    <div className={classes.center}>\r\n\r\n                        <QR value={vcard} />\r\n\r\n                    </div>\r\n\r\n                    <MyAnchor href=\"/\" onClick={downloadQR}> Descargar QR </MyAnchor>\r\n\r\n                </Paper>\r\n\r\n            </Grid>\r\n\r\n        </Grid>\r\n\r\n    )\r\n\r\n}","import React from 'react';\nimport { Vcard } from './pages/vcard';\n\nfunction App() {\n  return (\n\n    <Vcard />\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { createContext } from 'react'\n\nexport const Context = createContext()\n\nconst Provider = ({ children }) => {\n\n    const value = {\n\n    }\n\n    return (\n        <Context.Provider value={value}>\n            { children }\n        </Context.Provider>\n    )\n}\n\nexport default {\n    Provider,\n    Consumer: Context.Consumer\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Context from './Context';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(\n    <Context.Provider>\n        <App />\n    </Context.Provider>,\n    root\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}